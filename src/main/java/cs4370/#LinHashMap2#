package cs4370;
/************************************************************************************
 * @file LinHashMap.java
 *
 * @author  John Miller
 */

import java.io.*;
import java.lang.reflect.Array;
import static java.lang.System.out;
import java.util.*;

/************************************************************************************
 * This class provides hash maps that use the Linear Hashing algorithm.
 * A hash table is created that is an array of buckets.
 */
public class LinHashMap <K, V>
        extends AbstractMap <K, V>
        implements Serializable, Cloneable, Map <K, V>
{
    /** The number of slots (for key-value pairs) per bucket.
     */
    private static final int SLOTS = 4;

    /** The class for type K.
     */
    private final Class <K> classK;

    /** The class for type V.
     */
    private final Class <V> classV;

    /********************************************************************************
     * This inner class defines buckets that are stored in the hash table.
     */
    private class Bucket
    {
        int    nKeys;
        K []   key;
        V []   value;
        Bucket next;

        @SuppressWarnings("unchecked")
        Bucket (Bucket n)
        {
            nKeys = 0;
            key   = (K []) Array.newInstance (classK, SLOTS);
            value = (V []) Array.newInstance (classV, SLOTS);
            next  = n;
        } // constructor
    } // Bucket inner class

    /** The list of buckets making up the hash table.
     */
    private final List <Bucket> hTable;

    /** The modulus for low resolution hashing
     */
    private int mod1;

    /** The modulus for high resolution hashing
     */
    private int mod2;

    /** Counter for the number buckets accessed (for performance testing).
     */
    private int count = 0;

    /** The index of the next bucket to split.
     */
    private int split = 0;

    
    final class MyEntry<K, V> implements Map.Entry<K, V> {
        private final K key;
        private V value;

        public MyEntry(K key, V value) {
            this.key = key;
            this.value = value;
        }

        @Override
        public K getKey() {
            return key;
        }

        @Override
        public V getValue() {
            return value;
        }

        @Override
        public V setValue(V value) {
            V old = this.value;
            this.value = value;
            return old;
        }
    }
    
    /********************************************************************************
     * Construct a hash table that uses Linear Hashing.
     * @param classK    the class for keys (K)
     * @param classV    the class for keys (V)
     * @param initSize  the initial number of home buckets (a power of 2, e.g., 4)
     */
    public LinHashMap (Class <K> _classK, Class <V> _classV) //, int initSize)
    {
        classK = _classK;
        classV = _classV;
        hTable = new ArrayList <> ();
        mod1   = 4;                        // initSize;
        mod2   = 2 * mod1;

        for (int i = 0; i < mod1; i++) {
            hTable.add(i, new Bucket(null));
        }
    } // constructor

    /********************************************************************************
     * Return a set containing all the entries as pairs of keys and values.
     * @return  the set view of the map
     */
    public Set <Map.Entry <K, V>> entrySet ()
    {
        List<K> keyList = new ArrayList();
        List<V> valueList = new ArrayList();
        Map.Entry<K,V> entry=null;
        //Map <K, V> map;
        Set <Map.Entry <K, V>> enSet = new HashSet <> ();

        for(int i = 0; i < hTable.size(); i++) {
            Bucket currentBucket = hTable.get(i);
            while (currentBucket != null) {
                for (int j = 0; j < currentBucket.nKeys; j++) {
                    keyList.add(currentBucket.key[j]);
                    valueList.add(currentBucket.value[j]);
                }
                currentBucket = currentBucket.next;
            }
        }

        for(int i = 0; i < keyList.size(); i++){
            out.println("Add ("+keyList.get(i)+","+valueList.get(i)+")");
            entry=new AbstractMap.SimpleEntry<K,V>(keyList.get(i), valueList.get(i));
            enSet.add(entry);
        }
        

        return enSet;
    } // entrySet

    /********************************************************************************
     * Given the key, look up the value in the hash table.
     * @param key  the key used for look up
     * @return  the value associated with the key
     */
    public V get (Object key)
    {
        int indexHash = h (key);

        Bucket currentBucket = hTable.get(indexHash);
        while(currentBucket != null) {
            for (int i = 0; i < currentBucket.nKeys; i++) {
                if (currentBucket.key[i] == key) {
                    return currentBucket.value[i];
                }
            }
            currentBucket = currentBucket.next;
        }
        count++;
        return null;
    } // get

    /********************************************************************************
     * Given the key, look up the bucket it is in
     * @param key  the key used for look up
     * @return  the bucket associated with the key
     */
    private Bucket lookUpBucket(Object key) {
        int indexHash = h (key);

        Bucket currentBucket = hTable.get(indexHash);
        while(currentBucket != null) {
            for (int i = 0; i < currentBucket.nKeys; i++) {
                if (currentBucket.key[i] == key) {
                    return currentBucket;
                }
            }
            currentBucket = currentBucket.next;
        }
        return null;
    }

    /********************************************************************************
     * Given the bucket and key, look up the index
     * @param bucket the bucket the key is in
     * @param key  the key used for look up
     * @return  the index of the key
     */
    private int lookUpIndex(Bucket bucket, Object key) {
        for (int i = 0; i < bucket.nKeys; i++) {
            if (bucket.key[i] == key) {
                return i;
            }
        }
        return -1;
    }

    /********************************************************************************
     * Put the key-value pair in the hash table.
     * @param key    the key to insert
     * @param value  the value to insert
     * @return  null (not the previous value)
     */
    public V put (K key, V value)
    {
        int indexHash = h (key);
        out.println ("LinearHashMap.put: key = " + key + ", h() = " + indexHash + ", value = " + value);

        Bucket currentBucket = hTable.get(indexHash);
        if(get(key) == null) { // not duplicate key
            if (currentBucket.nKeys == 4) { // if the current bucket is full
                Bucket bucket = new Bucket(currentBucket);
                split++;
                hTable.set(indexHash, bucket);
                currentBucket = bucket;
            }
            insertTuple(key, value, currentBucket, currentBucket.nKeys);
            currentBucket.nKeys++;
        } else { // if duplicate key, find bucket and index, then insert new value in correct location
            Bucket bucket = lookUpBucket(key);
            int index = lookUpIndex(bucket, key);
            insertTuple(key, value, bucket, index);
        }
        count--;
        return null;
    } // put

    /********************************************************************************
     * Put the key-value pair in the bucket at index.
     * @param key    the key to insert
     * @param value  the value to insert
     * @param currentBucket the bucket in which to be inserted
     * @param index the index in the bucket at which to be inserted
     */
    private void insertTuple (K key, V value, Bucket currentBucket, int index) {
        currentBucket.key[index] = key;
        currentBucket.value[index] = value;
    }
    /********************************************************************************
     * Return the size (SLOTS * number of home buckets) of the hash table.
     * @return  the size of the hash table
     */
    public int size ()
    {
        return SLOTS * (mod1 + split);
    } // size

    /********************************************************************************
     * Print the hash table.
     */
    private void print ()
    {
        int overflowCt=0;
        boolean firstValue=false;
        
        out.println ("");
        out.println ("");
        out.println ("Hash Table (Linear Hashing)");
        out.println ("Format: (key,value)");
        out.println ("-------------------------------------------");

 
        for(int i = 0; i < hTable.size(); i++) {
            Bucket currentBucket = hTable.get(i);
            
            if (currentBucket.nKeys==0)
            {
                out.println("Bucket "+i+": Empty");
            }
            else
            {
                out.println("Bucket "+i+": Main");
            }
            firstValue=true;
            overflowCt=0;
            
           while(currentBucket != null) {
               if (!firstValue)
               {
                   out.println("          Overflow "+overflowCt);
               }
               else
               {
                   firstValue=false;
               }
               overflowCt++;
                for (int j = 0; j < currentBucket.nKeys; j++) {
                     out.println("          ("+currentBucket.key[j]+","+currentBucket.value[j]+")");
                 }
                 currentBucket=currentBucket.next;
           }
            
            if (firstValue)
            {
                out.println("");
            }
        }

        

        out.println ("-------------------------------------------");
 
    } // print

    /********************************************************************************
     * Hash the key using the low resolution hash function.
     * @param key  the key to hash
     * @return  the location of the bucket chain containing the key-value pair
     */
    private int h (Object key)
    {
        return key.hashCode () % mod1;
    } // h

    /********************************************************************************
     * Hash the key using the high resolution hash function.
     * @param key  the key to hash
     * @return  the location of the bucket chain containing the key-value pair
     */
    private int h2 (Object key)
    {
        return key.hashCode () % mod2;
    } // h2

    /********************************************************************************
     * The main method used for testing.
     * @param  the command-line arguments (args [0] gives number of keys to insert)
     */
    public static void main (String [] args)
    {

        int totalKeys    = 30;
        boolean RANDOMLY = false;
        Set <Map.Entry <Integer, Integer>> enSet;
        Map.Entry <Integer,Integer> entry;
        Iterator enSetIterator;
        
        LinHashMap <Integer, Integer> ht = new LinHashMap <> (Integer.class, Integer.class);
        if (args.length == 1) totalKeys = Integer.valueOf (args [0]);

        if (RANDOMLY) {
            Random rng = new Random ();
            for (int i = 1; i <= totalKeys; i += 2) ht.put (rng.nextInt (2 * totalKeys), i * i);
        } else {
            for (int i = 1; i <= totalKeys; i += 2) ht.put (i, i * i);
        } // if

        //test entry set
        //enSet=
        enSet=ht.entrySet();
        out.println("-----ENTRY SET-----##");
        enSetIterator=enSet.iterator();
        while (enSetIterator.hasNext())
        {
            entry=(Map.Entry <Integer,Integer>)enSetIterator.next();
            out.println("("+entry.getKey()+","+entry.getValue()+")");
        }
        
        ht.print ();
        for (int i = 0; i <= totalKeys; i++) {
            out.println ("key = " + i + " value = " + ht.get (i));
        } // for
        out.println ("-------------------------------------------");
        out.println(ht.count);
        out.println ("Average number of buckets accessed = " + ht.count / (double) totalKeys);
    } // main

} // LinHashMap class
